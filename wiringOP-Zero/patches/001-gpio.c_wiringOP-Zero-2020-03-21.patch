--- a/gpio/gpio.c	2022-01-13 23:50:18.000000000 +0200
+++ b/gpio/gpio.c	2022-01-28 13:20:08.928664954 +0200
@@ -46,6 +46,7 @@
 // External functions I can't be bothered creating a separate .h file for:
 
 extern void doReadall    (void) ;
+extern void cmReadall    (void) ;
 extern void doPins       (void) ;
 
 #ifndef TRUE
@@ -62,8 +63,9 @@
 char *usage = "Usage: gpio -v\n"
               "       gpio -h\n"
               "       gpio [-g|-1] [-x extension:params] ...\n"
+              "       gpio <toggle/blink> <pin>\n"
               "       gpio <read/write/aread/awritewb/pwm/mode> ...\n"   /*modify for BananaPro by LeMaker team*/
-	      "       gpio readall/reset\n"
+	      "       gpio readall/nreadall/allreadall/reset\n"
 	      "       gpio unexportall/exports\n"
 	      "       gpio export/edge/unexport ...\n"
 	      "       gpio pwm-bal/pwm-ms \n"
@@ -358,7 +360,7 @@
   char fName [128] ;
   char buf [16] ;
 
-  for (first = 0, i = 0 ; i < 32 ; ++i)	// Crude, but effective  /*64->32 modify for BananaPro by lemaker team*/
+  for (first = 0, i = 0 ; i < 384 ; ++i)
   {
 
 // Try to read the direction
@@ -701,14 +703,17 @@
   FILE *fd ;
   int pin ;
 
-  for (pin = 1 ; pin < 32 ; ++pin) /*0->1 63->32 modify for BananaPro by LeMaker team*/
+  for (pin = 1 ; pin < 384 ; ++pin)
   {
+     if (wpiPinToGpio (pin) == -1)
+	continue ;
+    //printf (" Unexportall: gpio-%d\n", wpiPinToGpio (pin)) ; // test: All gpio-unexport
     if ((fd = fopen ("/sys/class/gpio/unexport", "w")) == NULL)
     {
       fprintf (stderr, "%s: Unable to open GPIO export interface\n", progName) ;
       exit (1) ;
     }
-    fprintf (fd, "%d\n", pin) ;
+    fprintf (fd, "%d\n", wpiPinToGpio (pin)) ;
     fclose (fd) ;
   }
 }
@@ -748,11 +753,12 @@
   {
     doUnexportall (progName) ;
 
-    for (pin = 0 ; pin < 64 ; ++pin)
+    for (pin = 0 ; pin < 384 ; ++pin)
     {
       if (wpiPinToGpio (pin) == -1)
 	continue ;
 
+	//printf (" Resetall: gpio-%d\n", wpiPinToGpio (pin)) ; // test: All gpio-Reset
       digitalWrite    (pin, LOW) ;
       pinMode         (pin, INPUT) ;
       pullUpDnControl (pin, PUD_OFF) ;
@@ -1114,6 +1120,34 @@
 
 
 /*
+ * doBlink:
+ *	Blink an IO pin
+ *********************************************************************************
+ */
+
+void doBlink (int argc, char *argv [])
+{
+  int pin ;
+
+  if (argc != 3)
+  {
+    fprintf (stderr, "Usage: %s blink pin\n", argv [0]) ;
+    exit (1) ;
+  }
+
+  pin = atoi (argv [2]) ;
+
+  pinMode (pin, OUTPUT) ;
+  for (;;)
+  {
+    digitalWrite (pin, !digitalRead (pin)) ;
+    delay (500) ;
+  }
+
+}
+
+
+/*
  * doPwmTone:
  *	Output a tone in a PWM pin
  *********************************************************************************
@@ -1249,6 +1283,9 @@
   int i ;
   int model, rev, mem, maker, overVolted ;
 
+    char name [80] ;
+    FILE *fd ;
+
   if (getenv ("WIRINGPI_DEBUG") != NULL)
   {
     printf ("gpio: wiringPi debug mode enabled\n") ;
@@ -1292,19 +1329,19 @@
     printf ("This is free software with ABSOLUTELY NO WARRANTY.\n") ;
     printf ("For details type: %s -warranty\n", argv [0]) ;
     printf ("\n") ;
-    piBoardId (&model, &rev, &mem, &maker, &overVolted) ;
-    if (model == PI_MODEL_UNKNOWN)
-    {
-      printf ("Your Raspberry Pi has an unknown model type. Please report this to\n") ;
-      printf ("    projects@drogon.net\n") ;
-      printf ("with a copy of your /proc/cpuinfo if possible\n") ;
-    }
-    else
-    {
-      printf ("Board details:\n") ;
-      printf ("  Type: %s, Revision: %s, Memory: %dMB, Maker: %s %s\n",
-	  piModelNames [model], piRevisionNames [rev], mem, piMakerNames [maker], overVolted ? "[OV]" : "") ;
-    }
+
+//      if (stat ("/proc/device-tree", &statBuf) == 0)	// We're on a devtree system ...
+      printf ("  * Device tree is enabled.\n") ;
+
+//    if (stat ("/proc/device-tree/model", &statBuf) == 0)	// Output Kernel idea of board type
+//    {
+      if ((fd = fopen ("/proc/device-tree/model", "r")) != NULL)
+      {
+        if ( fgets (name, 80, fd) ){;}
+        fclose (fd) ;
+        printf ("  ** %s **\n", name) ;
+      }
+//    }
     return 0 ;
   }
 
@@ -1417,6 +1454,7 @@
 
   else if (strcasecmp (argv [1], "toggle" ) == 0) doToggle    (argc, argv) ;
 
+  else if (strcasecmp (argv [1], "blink"  ) == 0) doBlink     (argc, argv) ;
 // Pi Specifics
 
   else if (strcasecmp (argv [1], "pwm-bal"  ) == 0) doPwmMode    (PWM_MODE_BAL) ;
@@ -1426,7 +1464,7 @@
   else if (strcasecmp (argv [1], "pwmTone"  ) == 0) doPwmTone    (argc, argv) ;
   else if (strcasecmp (argv [1], "usbp"     ) == 0) doUsbP       (argc, argv) ;
   else if (strcasecmp (argv [1], "readall"  ) == 0) doReadall    () ;
-  else if (strcasecmp (argv [1], "nreadall" ) == 0) doReadall    () ;
+  else if ((strcasecmp (argv [1], "nreadall" ) == 0) || (strcasecmp (argv [1], "allreadall" ) == 0)) cmReadall  () ;
   else if (strcasecmp (argv [1], "pins"     ) == 0) doPins       () ;
   else if (strcasecmp (argv [1], "i2cdetect") == 0) doI2Cdetect  (argc, argv) ;
   else if (strcasecmp (argv [1], "i2cd"     ) == 0) doI2Cdetect  (argc, argv) ;
